; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=amdgpu-asan-instrument-lds -S -mtriple=amdgcn-amd-amdhsa | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32, i32 }

@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol !0
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 1, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 4, i32 8 } }, no_sanitize_address

;.
; CHECK: @llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol [[META0:![0-9]+]]
; CHECK: @llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 32, i32 1, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 64, i32 4, i32 32 } }, no_sanitize_address
;.
define amdgpu_kernel void @k0() #0 {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[WID:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label %[[MALLOC:.*]], label %[[BB38:.*]]
; CHECK:       [[MALLOC]]:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE:%.*]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP8]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr [[TMP10]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = call i64 @__asan_malloc_impl(i64 [[TMP9]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP13:%.*]] = inttoptr i64 [[TMP12]] to ptr addrspace(1)
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP14]], i32 ptrtoint (ptr addrspace(3) @llvm.amdgcn.sw.lds.k0 to i32)
; CHECK-NEXT:    [[TMP16:%.*]] = ptrtoint ptr addrspace(1) [[TMP15]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = lshr i64 [[TMP16]], 3
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[TMP17]], 2147450880
; CHECK-NEXT:    [[TMP19:%.*]] = inttoptr i64 [[TMP18]] to ptr
; CHECK-NEXT:    [[TMP20:%.*]] = load i8, ptr [[TMP19]], align 1
; CHECK-NEXT:    [[TMP21:%.*]] = icmp ne i8 [[TMP20]], 0
; CHECK-NEXT:    [[TMP22:%.*]] = and i64 [[TMP16]], 7
; CHECK-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 7
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP23]] to i8
; CHECK-NEXT:    [[TMP25:%.*]] = icmp sge i8 [[TMP24]], [[TMP20]]
; CHECK-NEXT:    [[TMP26:%.*]] = and i1 [[TMP21]], [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP26]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i64 [[TMP27]], 0
; CHECK-NEXT:    br i1 [[TMP28]], label %[[ASAN_REPORT:.*]], label %[[BB31:.*]], !prof [[PROF1:![0-9]+]]
; CHECK:       [[ASAN_REPORT]]:
; CHECK-NEXT:    br i1 [[TMP26]], label %[[BB29:.*]], label %[[BB30:.*]]
; CHECK:       [[BB29]]:
; CHECK-NEXT:    call void @__asan_report_store8(i64 [[TMP16]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB30]]
; CHECK:       [[BB30]]:
; CHECK-NEXT:    br label %[[BB31]]
; CHECK:       [[BB31]]:
; CHECK-NEXT:    store ptr addrspace(1) [[TMP13]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 68
; CHECK-NEXT:    [[TMP33:%.*]] = ptrtoint ptr addrspace(1) [[TMP32]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP33]], i64 28)
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 33
; CHECK-NEXT:    [[TMP35:%.*]] = ptrtoint ptr addrspace(1) [[TMP34]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP35]], i64 31)
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 8
; CHECK-NEXT:    [[TMP37:%.*]] = ptrtoint ptr addrspace(1) [[TMP36]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP37]], i64 24)
; CHECK-NEXT:    br label %[[BB38]]
; CHECK:       [[BB38]]:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, %[[WID]] ], [ true, %[[BB31]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP39]]
; CHECK-NEXT:    [[TMP41:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP41]]
; CHECK-NEXT:    [[TMP43:%.*]] = ptrtoint ptr addrspace(3) [[TMP40]] to i32
; CHECK-NEXT:    [[TMP44:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP44]], i32 [[TMP43]]
; CHECK-NEXT:    [[TMP46:%.*]] = ptrtoint ptr addrspace(1) [[TMP45]] to i64
; CHECK-NEXT:    [[TMP47:%.*]] = lshr i64 [[TMP46]], 3
; CHECK-NEXT:    [[TMP48:%.*]] = add i64 [[TMP47]], 2147450880
; CHECK-NEXT:    [[TMP49:%.*]] = inttoptr i64 [[TMP48]] to ptr
; CHECK-NEXT:    [[TMP50:%.*]] = load i8, ptr [[TMP49]], align 1
; CHECK-NEXT:    [[TMP51:%.*]] = icmp ne i8 [[TMP50]], 0
; CHECK-NEXT:    [[TMP52:%.*]] = and i64 [[TMP46]], 7
; CHECK-NEXT:    [[TMP53:%.*]] = trunc i64 [[TMP52]] to i8
; CHECK-NEXT:    [[TMP54:%.*]] = icmp sge i8 [[TMP53]], [[TMP50]]
; CHECK-NEXT:    [[TMP55:%.*]] = and i1 [[TMP51]], [[TMP54]]
; CHECK-NEXT:    [[TMP56:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP55]])
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i64 [[TMP56]], 0
; CHECK-NEXT:    br i1 [[TMP57]], label %[[ASAN_REPORT1:.*]], label %[[BB60:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT1]]:
; CHECK-NEXT:    br i1 [[TMP55]], label %[[BB58:.*]], label %[[BB59:.*]]
; CHECK:       [[BB58]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP46]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB59]]
; CHECK:       [[BB59]]:
; CHECK-NEXT:    br label %[[BB60]]
; CHECK:       [[BB60]]:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP40]], align 4
; CHECK-NEXT:    [[TMP61:%.*]] = ptrtoint ptr addrspace(3) [[TMP42]] to i32
; CHECK-NEXT:    [[TMP62:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP62]], i32 [[TMP61]]
; CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr addrspace(1) [[TMP63]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = lshr i64 [[TMP64]], 3
; CHECK-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], 2147450880
; CHECK-NEXT:    [[TMP67:%.*]] = inttoptr i64 [[TMP66]] to ptr
; CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[TMP67]], align 1
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ne i8 [[TMP68]], 0
; CHECK-NEXT:    [[TMP70:%.*]] = and i64 [[TMP64]], 7
; CHECK-NEXT:    [[TMP71:%.*]] = add i64 [[TMP70]], 3
; CHECK-NEXT:    [[TMP72:%.*]] = trunc i64 [[TMP71]] to i8
; CHECK-NEXT:    [[TMP73:%.*]] = icmp sge i8 [[TMP72]], [[TMP68]]
; CHECK-NEXT:    [[TMP74:%.*]] = and i1 [[TMP69]], [[TMP73]]
; CHECK-NEXT:    [[TMP75:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = icmp ne i64 [[TMP75]], 0
; CHECK-NEXT:    br i1 [[TMP76]], label %[[ASAN_REPORT2:.*]], label %[[BB79:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT2]]:
; CHECK-NEXT:    br i1 [[TMP74]], label %[[BB77:.*]], label %[[BB78:.*]]
; CHECK:       [[BB77]]:
; CHECK-NEXT:    call void @__asan_report_store4(i64 [[TMP64]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB78]]
; CHECK:       [[BB78]]:
; CHECK-NEXT:    br label %[[BB79]]
; CHECK:       [[BB79]]:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP42]], align 2
; CHECK-NEXT:    br label %[[CONDFREE:.*]]
; CHECK:       [[CONDFREE]]:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label %[[FREE:.*]], label %[[END:.*]]
; CHECK:       [[FREE]]:
; CHECK-NEXT:    [[TMP80:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP80]], i32 ptrtoint (ptr addrspace(3) @llvm.amdgcn.sw.lds.k0 to i32)
; CHECK-NEXT:    [[TMP82:%.*]] = ptrtoint ptr addrspace(1) [[TMP81]] to i64
; CHECK-NEXT:    [[TMP83:%.*]] = lshr i64 [[TMP82]], 3
; CHECK-NEXT:    [[TMP84:%.*]] = add i64 [[TMP83]], 2147450880
; CHECK-NEXT:    [[TMP85:%.*]] = inttoptr i64 [[TMP84]] to ptr
; CHECK-NEXT:    [[TMP86:%.*]] = load i8, ptr [[TMP85]], align 1
; CHECK-NEXT:    [[TMP87:%.*]] = icmp ne i8 [[TMP86]], 0
; CHECK-NEXT:    [[TMP88:%.*]] = and i64 [[TMP82]], 7
; CHECK-NEXT:    [[TMP89:%.*]] = add i64 [[TMP88]], 7
; CHECK-NEXT:    [[TMP90:%.*]] = trunc i64 [[TMP89]] to i8
; CHECK-NEXT:    [[TMP91:%.*]] = icmp sge i8 [[TMP90]], [[TMP86]]
; CHECK-NEXT:    [[TMP92:%.*]] = and i1 [[TMP87]], [[TMP91]]
; CHECK-NEXT:    [[TMP93:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP92]])
; CHECK-NEXT:    [[TMP94:%.*]] = icmp ne i64 [[TMP93]], 0
; CHECK-NEXT:    br i1 [[TMP94]], label %[[ASAN_REPORT3:.*]], label %[[BB97:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT3]]:
; CHECK-NEXT:    br i1 [[TMP92]], label %[[BB95:.*]], label %[[BB96:.*]]
; CHECK:       [[BB95]]:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP82]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB96]]
; CHECK:       [[BB96]]:
; CHECK-NEXT:    br label %[[BB97]]
; CHECK:       [[BB97]]:
; CHECK-NEXT:    [[TMP98:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP99:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP100:%.*]] = ptrtoint ptr [[TMP99]] to i64
; CHECK-NEXT:    [[TMP101:%.*]] = ptrtoint ptr addrspace(1) [[TMP98]] to i64
; CHECK-NEXT:    call void @__asan_free_impl(i64 [[TMP101]], i64 [[TMP100]])
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %14

Malloc:
  %6 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %7 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 4
  %8 = add i32 %6, %7
  %9 = zext i32 %8 to i64
  %10 = call ptr @llvm.returnaddress(i32 0)
  %11 = ptrtoint ptr %10 to i64
  %12 = call i64 @__asan_malloc_impl(i64 %9, i64 %11)
  %13 = inttoptr i64 %12 to ptr addrspace(1)
  store ptr addrspace(1) %13, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %14

14:
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %15 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %16 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %15
  %17 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %18 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %17
  store i8 7, ptr addrspace(3) %16, align 4
  store i32 8, ptr addrspace(3) %18, align 2
  br label %CondFree

CondFree:
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:
  %19 = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  %20 = call ptr @llvm.returnaddress(i32 0)
  %21 = ptrtoint ptr %20 to i64
  %22 = ptrtoint ptr addrspace(1) %19 to i64
  call void @__asan_free_impl(i64 %22, i64 %21)
  br label %End

End:
  ret void
}

declare i32 @llvm.amdgcn.workitem.id.x() #1
declare i32 @llvm.amdgcn.workitem.id.y() #1
declare i32 @llvm.amdgcn.workitem.id.z() #1
declare ptr @llvm.returnaddress(i32 immarg) #2
declare i64 @__asan_malloc_impl(i64, i64)
declare void @llvm.amdgcn.s.barrier() #3
declare void @__asan_free_impl(i64, i64)

attributes #0 = { sanitize_address "amdgpu-lds-size"="24" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nofree nounwind willreturn }

!0 = !{i32 0, i32 1}
;.
; CHECK: attributes #[[ATTR0]] = { sanitize_address "amdgpu-lds-size"="96" }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { convergent nocallback nofree nounwind willreturn }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { convergent nocallback nofree nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR5:[0-9]+]] = { convergent nocallback nofree nounwind }
; CHECK: attributes #[[ATTR6]] = { nomerge }
;.
; CHECK: [[META0]] = !{i32 0, i32 1}
; CHECK: [[PROF1]] = !{!"branch_weights", i32 1, i32 100000}
;.
